version: '3.8'

services:
  # ==========================================
  # MAIN APPLICATION
  # ==========================================
  swiftqueue-backend:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: swiftqueue-backend-prod
    ports:
      - "8000:8000"
    environment:
      - ENV=production
      - DEBUG=False
      - DATABASE_URL=postgresql://queue_user:secure_password@postgres:5432/queue_management
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - INFOBIP_API_KEY=${INFOBIP_API_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
      - ALLOWED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./models:/app/models
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - swiftqueue-network

  # ==========================================
  # DATABASE
  # ==========================================
  postgres:
    image: postgres:15-alpine
    container_name: swiftqueue-postgres
    environment:
      - POSTGRES_DB=queue_management
      - POSTGRES_USER=queue_user
      - POSTGRES_PASSWORD=secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U queue_user -d queue_management"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - swiftqueue-network

  # ==========================================
  # CACHE & SESSION STORE
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: swiftqueue-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - swiftqueue-network

  # ==========================================
  # REVERSE PROXY & LOAD BALANCER
  # ==========================================
  nginx:
    image: nginx:alpine
    container_name: swiftqueue-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - swiftqueue-backend
    restart: unless-stopped
    networks:
      - swiftqueue-network

  # ==========================================
  # MONITORING & LOGGING
  # ==========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: swiftqueue-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - swiftqueue-network

  grafana:
    image: grafana/grafana:latest
    container_name: swiftqueue-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_password_change_in_production
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - swiftqueue-network

  # ==========================================
  # LOG AGGREGATION
  # ==========================================
  loki:
    image: grafana/loki:latest
    container_name: swiftqueue-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - swiftqueue-network

  promtail:
    image: grafana/promtail:latest
    container_name: swiftqueue-promtail
    volumes:
      - ./logs:/var/log/swiftqueue:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped
    networks:
      - swiftqueue-network

  # ==========================================
  # BACKUP SERVICE
  # ==========================================
  backup:
    image: postgres:15-alpine
    container_name: swiftqueue-backup
    environment:
      - POSTGRES_DB=queue_management
      - POSTGRES_USER=queue_user
      - POSTGRES_PASSWORD=secure_password
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    command: >
      sh -c "
        while true; do
          sleep 86400;  # Daily backup
          /backup.sh;
        done
      "
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - swiftqueue-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  swiftqueue-network:
    driver: bridge